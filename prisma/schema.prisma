// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
    id            String     @id @default(cuid())
    name          String
    profile       String
    email         String     @unique
    emailVerified DateTime?
    image         String?
    Accounts      Account[]
    Posts         Post[]
    Sessions      Session[]
    Likes         Like[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String
    access_token      String
    expires_at        Int
    token_type        String
    scope             String
    id_token          String
    session_state     String?

    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id                String            @id @default(uuid())
  userId            String
  title             String
  thumbnail         String
  created_at        DateTime
  updated_at        DateTime
  User              User              @relation(fields: [userId], references: [id])
  PostFormatBases   PostFormatBase[]
  PostFormatChallenges PostFormatChallenge[]
  CategoryRelations CategoryRelation[]
  Likes             Like[]
}

model PostFormatBase {
  id       String @id @default(uuid())
  postId   String
  contents String
  Post     Post   @relation(fields: [postId], references: [id])
}

model PostFormatChallenge {
  id       String @id @default(uuid())
  postId   String
  theme    String
  contents String
  Post     Post   @relation(fields: [postId], references: [id])
}

model Category {
  id             String            @id @default(uuid())
  label          String            @unique
  name           String            @unique
  icon           String?
  CategoryRelations CategoryRelation[]
}

model CategoryRelation {
  postId     String
  categoryId String
  Post       Post   @relation(fields: [postId], references: [id])
  Category   Category @relation(fields: [categoryId], references: [id])
  @@id([postId, categoryId])
}

model Like {
  id     String @id @default(uuid())
  postId String
  userId String
  Post   Post   @relation(fields: [postId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
}
